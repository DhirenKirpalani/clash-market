import { useState, useEffect, useRef } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useDrift } from "@/lib/driftAdapter";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { initTradingView } from "@/lib/tradingViewAdapter";

interface TradingChartProps {
  market: string;
}

// Available markets for selection
const AVAILABLE_MARKETS = [
  { label: "BTC-PERP", value: "BTC-PERP" },
  { label: "ETH-PERP", value: "ETH-PERP" },
  { label: "SOL-PERP", value: "SOL-PERP" },
  { label: "AVAX-PERP", value: "AVAX-PERP" },
  { label: "ARB-PERP", value: "ARB-PERP" },
  { label: "BNB-PERP", value: "BNB-PERP" },
  { label: "DOGE-PERP", value: "DOGE-PERP" }
];

// Available timeframes for selection
const TIMEFRAMES = [
  { label: "1m", value: "1" },
  { label: "5m", value: "5" },
  { label: "15m", value: "15" },
  { label: "1h", value: "60" },
  { label: "4h", value: "240" },
  { label: "1D", value: "D" }
];

export default function TradingChart({ market: initialMarket }: TradingChartProps) {
  // Allow changing the market within the component
  const [selectedMarket, setSelectedMarket] = useState(initialMarket);
  const [timeframe, setTimeframe] = useState("15");
  const [currentPrice, setCurrentPrice] = useState<number | null>(null);
  const [priceChange, setPriceChange] = useState({ value: 0, percentage: 0 });
  const chartContainerRef = useRef<HTMLDivElement>(null);
  const { getMarketPrice } = useDrift();
  
  // Format price with proper decimal places
  const formatPrice = (price: number) => {
    return price.toLocaleString(undefined, {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
  };
  
  // Initialize TradingView chart
  useEffect(() => {
    if (!chartContainerRef.current) return;
    
    // Generate a unique ID for the container if it doesn't have one
    if (!chartContainerRef.current.id) {
      chartContainerRef.current.id = `tv_chart_${Math.random().toString(36).substring(2, 9)}`;
    }
    
    // Convert market format to TradingView format (e.g., "BTC-PERP" -> "BINANCE:BTCUSDT")
    const symbol = `BINANCE:${selectedMarket.replace('-PERP', '')}USDT`;
    
    // Initialize the TradingView chart
    initTradingView(chartContainerRef.current, symbol, timeframe)
      .catch(error => console.error("Failed to initialize TradingView chart:", error));
      
    // Fetch current price data
    const fetchPriceData = async () => {
      try {
        const price = await getMarketPrice(selectedMarket);
        setCurrentPrice(price);
        
        // Mock price change data (in a real app, this would come from the API)
        const changeValue = price * (Math.random() * 0.06 - 0.03); // Random -3% to +3%
        const changePercentage = (changeValue / price) * 100;
        setPriceChange({
          value: changeValue,
          percentage: changePercentage
        });
      } catch (error) {
        console.error("Failed to fetch price data:", error);
      }
    };
    
    fetchPriceData();
    const intervalId = setInterval(fetchPriceData, 30000); // Update every 30 seconds
    
    return () => {
      clearInterval(intervalId);
    };
  }, [selectedMarket, timeframe, getMarketPrice]);
  
  const isPriceUp = priceChange.percentage >= 0;
  
  return (
    <Card className="gradient-card rounded-xl p-4 border border-neutral/20 mb-6">
      <CardContent className="p-0">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-2">
          {/* Market selector and price info */}
          <div className="flex flex-col md:flex-row items-start md:items-center gap-2 md:gap-4 w-full md:w-auto">
            <Select
              value={selectedMarket}
              onValueChange={(value) => setSelectedMarket(value)}
            >
              <SelectTrigger className="bg-bg-primary border-neutral/20 w-40 h-9 text-sm">
                <SelectValue placeholder="Select market" />
              </SelectTrigger>
              <SelectContent className="bg-bg-darker border-neutral/20">
                {AVAILABLE_MARKETS.map((market) => (
                  <SelectItem key={market.value} value={market.value} className="text-sm hover:bg-bg-primary">
                    {market.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            {currentPrice && (
              <span className="font-mono font-medium">
                {formatPrice(currentPrice)}
                <span className={`ml-2 text-sm ${isPriceUp ? 'text-profit' : 'text-loss'}`}>
                  {isPriceUp ? '+' : ''}{priceChange.percentage.toFixed(2)}%
                </span>
              </span>
            )}
          </div>
          
          {/* Timeframe selector */}
          <div className="flex flex-wrap gap-1">
            {TIMEFRAMES.map((tf) => (
              <Button
                key={tf.value}
                size="sm"
                variant="ghost"
                className={`text-xs h-9 px-3 ${timeframe === tf.value ? "bg-accent-primary/20 text-accent-primary" : "bg-bg-primary"}`}
                onClick={() => setTimeframe(tf.value)}
              >
                {tf.label}
              </Button>
            ))}
          </div>
        </div>
        
        {/* Chart Container */}
        <div 
          ref={chartContainerRef} 
          className="h-[400px] w-full rounded-lg overflow-hidden bg-bg-primary/50"
        />
      </CardContent>
    </Card>
  );
}
